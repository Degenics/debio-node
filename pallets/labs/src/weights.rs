//! Autogenerated weights for labs
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-04, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/debio
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=labs
// --extrinsic=*
// --steps=20
// --repeat=10
// --heap-pages=4096
// --raw
// --output=./pallets/labs/src/weights.rs
// --template=./.maintain/pallet-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for labs.
pub trait WeightInfo {
	fn register_lab() -> Weight;
	fn update_lab() -> Weight;
	fn update_lab_verification_status() -> Weight;
	fn deregister_lab() -> Weight;
	fn stake_lab() -> Weight;
	fn unstake_lab() -> Weight;
	fn retrieve_unstake_amount() -> Weight;
	fn update_minimum_stake_amount() -> Weight;
	fn update_unstake_time() -> Weight;
	fn update_admin_key() -> Weight;
}

/// Weights for labs using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCount (r:1 w:1)
	// Storage: Labs LabCountByCountryRegionCity (r:1 w:1)
	fn register_lab() -> Weight {
		54_891_000_u64
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:2 w:2)
	// Storage: Labs LabCountByCountryRegionCity (r:2 w:2)
	fn update_lab() -> Weight {
		67_311_000_u64
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs Labs (r:1 w:1)
	fn update_lab_verification_status() -> Weight {
		29_102_000_u64
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCountByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCount (r:1 w:1)
	fn deregister_lab() -> Weight {
		53_771_000_u64
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Labs MinimumStakeAmount (r:1 w:0)
	// Storage: Labs PalletAccount (r:1 w:0)
	// Storage: Labs TotalStakedAmount (r:0 w:1)
	fn stake_lab() -> Weight {
		116_764_000_u64
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Orders PendingOrdersBySeller (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Labs UnstakeTime (r:1 w:0)
	fn unstake_lab() -> Weight {
		38_567_000_u64
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Labs PalletAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Labs TotalStakedAmount (r:0 w:1)
	fn retrieve_unstake_amount() -> Weight {
		81_605_000_u64
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs MinimumStakeAmount (r:0 w:1)
	fn update_minimum_stake_amount() -> Weight {
		29_159_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs UnstakeTime (r:0 w:1)
	fn update_unstake_time() -> Weight {
		18_458_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:1)
	fn update_admin_key() -> Weight {
		18_698_000_u64
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCount (r:1 w:1)
	// Storage: Labs LabCountByCountryRegionCity (r:1 w:1)
	fn register_lab() -> Weight {
		54_891_000_u64
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:2 w:2)
	// Storage: Labs LabCountByCountryRegionCity (r:2 w:2)
	fn update_lab() -> Weight {
		67_311_000_u64
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs Labs (r:1 w:1)
	fn update_lab_verification_status() -> Weight {
		29_102_000_u64
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Labs LabsByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCountByCountryRegionCity (r:1 w:1)
	// Storage: Labs LabCount (r:1 w:1)
	fn deregister_lab() -> Weight {
		53_771_000_u64
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Labs MinimumStakeAmount (r:1 w:0)
	// Storage: Labs PalletAccount (r:1 w:0)
	// Storage: Labs TotalStakedAmount (r:0 w:1)
	fn stake_lab() -> Weight {
		116_764_000_u64
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Orders PendingOrdersBySeller (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Labs UnstakeTime (r:1 w:0)
	fn unstake_lab() -> Weight {
		38_567_000_u64
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs Labs (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Labs PalletAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Labs TotalStakedAmount (r:0 w:1)
	fn retrieve_unstake_amount() -> Weight {
		81_605_000_u64
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs MinimumStakeAmount (r:0 w:1)
	fn update_minimum_stake_amount() -> Weight {
		29_159_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:0)
	// Storage: Labs UnstakeTime (r:0 w:1)
	fn update_unstake_time() -> Weight {
		18_458_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Labs LabVerifierKey (r:1 w:1)
	fn update_admin_key() -> Weight {
		18_698_000_u64
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
